'use strict';

var Builder = require('buffer-builder'),
    AMQPClient = require('../../lib').Client,
    MockServer = require('./mocks').Server,

    constants = require('../../lib/constants'),
    frames = require('../../lib/frames'),

    Policy = require('../../lib/policies/policy'),
    AMQPError = require('../../lib/types/amqp_error'),
    ErrorCondition = require('../../lib/types/error_condition'),
    m = require('../../lib/types/message'),

    test = require('./test-fixture');

var TestPolicy = new Policy({
  connect: { options: { containerId: 'test' } },
  reconnect: { retries: 0, forever: false }
});

function encodeMessagePayload(message) {
  var tmpBuf = new Builder();
  m.encodeMessage(message, tmpBuf);
  return tmpBuf.get();
}

describe('Client', function() {
  describe('#connect()', function() {
    beforeEach(function() {
      if (!!test.server) test.server = undefined;
      if (!!test.client) test.client = undefined;
      test.client = new AMQPClient(TestPolicy);
      test.server = new MockServer();
      return test.server.setup();
    });

    afterEach(function() {
      if (!test.server) return;
      return test.server.teardown()
        .then(function() { test.server = undefined; });
    });

    it('should connect then disconnect', function() {
      test.server.setResponseSequence([
        constants.amqpVersion,
        new frames.OpenFrame(test.client.policy.connect.options),
        new frames.BeginFrame({
          remoteChannel: 1, nextOutgoingId: 0,
          incomingWindow: 2147483647, outgoingWindow: 2147483647,
          handleMax: 4294967295
        }),
        new frames.CloseFrame({
          error: new AMQPError({ condition: ErrorCondition.ConnectionForced, description: 'test' })
        })
      ]);

      return test.client.connect(test.server.address())
        .then(function() { return test.client.disconnect(); });
    });
  });
});
