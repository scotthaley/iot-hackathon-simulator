'use strict';

const amqp10 = require('amqp10');

let uri = 'amqp://192.168.11.77';
let endpoint = '/endpoint';

let policy = amqp10.Policy.merge({
  senderLink: {
    attach: {
      properties: {
        'com.microsoft:client-version': 'amqp10test'
      },
      maxMessageSize: 0,
    },
    encoder: function(body) {
      if (typeof body === 'string') {
        return new Buffer(body, 'utf8');
      } else {
        return body;
      }
    },
    reattach: {
      retries: 0,
      forever: false
    }
  },
  receiverLink: {
    attach: {
      properties: {
        'com.microsoft:client-version': 'amqp10test'
      },
      maxMessageSize: 0,
      receiverSettleMode: false,
    },
    decoder: function(body) { return body; },
    reattach: {
      retries: 0,
      forever: false
    }
  },
  // reconnections will be handled at the client level, not the transport level.
  reconnect: {
    retries: 0,
    strategy: 'fibonnaci',
    forever: false
  }
}, amqp10.Policy.EventHub);


var amqpClient = new amqp10.Client(policy);

amqpClient.on('connection:opened', function(ev) {
  console.log('connection:opened');
});

amqpClient.on('connection:closed', function(ev) {
  console.log('connection:closed');
});

amqpClient.on('client:errorReceived', function(err) {
  console.log('client:errorReceived: ' + err.toString());
});

amqpClient.connect(uri)
  .then(() => amqpClient.createSender(endpoint))
  .then(startSending)
  .catch(function(err) {
    console.error(err.toString());
  });


function startSending(senderLink) {
  var msg = { properties: { to: endpoint }, body: 'foo' };

  setInterval(function() {
    console.log('sending...');
    senderLink.send(msg)
      .then(res => console.log('... sent: '))
      .catch(err => console.error(err.toString()));
  }, 1000);
}